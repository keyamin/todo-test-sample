// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package main

import (
	"sync"
)

// Ensure, that TodoUsecaseMock does implement TodoUsecase.
// If this is not the case, regenerate this file with moq.
var _ TodoUsecase = &TodoUsecaseMock{}

// TodoUsecaseMock is a mock implementation of TodoUsecase.
//
//	func TestSomethingThatUsesTodoUsecase(t *testing.T) {
//
//		// make and configure a mocked TodoUsecase
//		mockedTodoUsecase := &TodoUsecaseMock{
//			OneFunc: func(id int) (*Todo, error) {
//				panic("mock out the One method")
//			},
//		}
//
//		// use mockedTodoUsecase in code that requires TodoUsecase
//		// and then make assertions.
//
//	}
type TodoUsecaseMock struct {
	// OneFunc mocks the One method.
	OneFunc func(id int) (*Todo, error)

	// calls tracks calls to the methods.
	calls struct {
		// One holds details about calls to the One method.
		One []struct {
			// ID is the id argument value.
			ID int
		}
	}
	lockOne sync.RWMutex
}

// One calls OneFunc.
func (mock *TodoUsecaseMock) One(id int) (*Todo, error) {
	if mock.OneFunc == nil {
		panic("TodoUsecaseMock.OneFunc: method is nil but TodoUsecase.One was just called")
	}
	callInfo := struct {
		ID int
	}{
		ID: id,
	}
	mock.lockOne.Lock()
	mock.calls.One = append(mock.calls.One, callInfo)
	mock.lockOne.Unlock()
	return mock.OneFunc(id)
}

// OneCalls gets all the calls that were made to One.
// Check the length with:
//
//	len(mockedTodoUsecase.OneCalls())
func (mock *TodoUsecaseMock) OneCalls() []struct {
	ID int
} {
	var calls []struct {
		ID int
	}
	mock.lockOne.RLock()
	calls = mock.calls.One
	mock.lockOne.RUnlock()
	return calls
}
